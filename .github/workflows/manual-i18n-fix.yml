name: Manual i18n Conflict Resolution

# This workflow provides an easy way for users to manually resolve i18n conflicts
# Especially useful for Windows users who cannot run the script locally
on:
  # Manual trigger only - accessible from GitHub Actions tab
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to resolve i18n conflicts for'
        required: true
        type: string
      target_branch:
        description: 'Target branch to merge into (usually main)'
        required: false
        type: string
        default: 'main'
      dry_run:
        description: 'Dry run mode - check for conflicts without making changes'
        required: false
        type: boolean
        default: false

jobs:
  manual-i18n-resolution:
    runs-on: ubuntu-latest
    timeout-minutes: 1 # 30-second timeout for manual resolution

    steps:
      # Step 1: Checkout the repository with full history
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          # Checkout the specific PR branch
          ref: refs/pull/${{ github.event.inputs.pr_number }}/head

      # Step 2: Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.17.1'
          cache: 'npm'

      # Step 3: Install project dependencies
      - name: Install dependencies
        run: npm install

      # Step 4: Configure Git for automated commits
      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      # Step 5: Get PR information for validation
      - name: Get PR information
        id: pr-info
        uses: actions/github-script@v6
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ github.event.inputs.pr_number }}
            });

            console.log(`PR #${pr.number}: ${pr.title}`);
            console.log(`From: ${pr.head.ref} -> To: ${pr.base.ref}`);
            console.log(`State: ${pr.state}`);

            if (pr.state !== 'open') {
              core.setFailed(`PR #${pr.number} is not open (current state: ${pr.state})`);
              return;
            }

            // Check if PR has translation file changes
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number
            });

            const i18nFiles = files.filter(file => 
              file.filename.includes('src/locales/') && file.filename.endsWith('.po')
            );

            if (i18nFiles.length === 0) {
              console.log('‚ö†Ô∏è Warning: This PR does not contain any translation file changes');
            } else {
              console.log(`Found ${i18nFiles.length} translation files in this PR:`);
              i18nFiles.forEach(file => console.log(`  - ${file.filename}`));
            }

            core.setOutput('pr_title', pr.title);
            core.setOutput('pr_state', pr.state);
            core.setOutput('has_i18n_files', i18nFiles.length > 0);

      # Step 6: Check for conflicts with target branch
      - name: Check for merge conflicts
        id: conflict-check
        run: |
          echo "Fetching latest ${{ github.event.inputs.target_branch }} branch..."
          git fetch origin ${{ github.event.inputs.target_branch }}

          echo "Checking for potential merge conflicts..."
          # Use git merge-tree to detect conflicts without actually merging
          if git merge-tree $(git merge-base HEAD origin/${{ github.event.inputs.target_branch }}) HEAD origin/${{ github.event.inputs.target_branch }} | grep -q "src/locales.*\.po"; then
            echo "conflicts_detected=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Detected i18n conflicts that can be auto-resolved"
          else
            echo "conflicts_detected=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è No i18n conflicts detected"
          fi

      # Step 7: Dry run mode - show what would be done without making changes
      - name: Dry run - Show conflict analysis
        if: github.event.inputs.dry_run == 'true'
        run: |
          echo "üîç DRY RUN MODE - No changes will be made"
          echo "==========================================="

          if [ "${{ steps.conflict-check.outputs.conflicts_detected }}" = "true" ]; then
            echo "üìã Conflicts detected in the following files:"
            git merge-tree $(git merge-base HEAD origin/${{ github.event.inputs.target_branch }}) HEAD origin/${{ github.event.inputs.target_branch }} | grep "src/locales.*\.po" || true
            echo ""
            echo "üîß The auto-resolve script would:"
            echo "  1. Attempt to merge ${{ github.event.inputs.target_branch }} into current branch"
            echo "  2. Run intelligent conflict resolution for .po files"
            echo "  3. Compile Lingui translations"
            echo "  4. Commit the resolved changes"
            echo "  5. Push changes back to the PR branch"
          else
            echo "‚úÖ No conflicts detected - manual resolution not needed"
          fi

          echo ""
          echo "To actually resolve conflicts, re-run this workflow with 'Dry run mode' unchecked."

      # Step 8: Actual conflict resolution (only if not in dry run mode)
      - name: Resolve i18n conflicts
        if: github.event.inputs.dry_run == 'false' && steps.conflict-check.outputs.conflicts_detected == 'true'
        timeout-minutes: 1 # 30-second timeout for conflict resolution
        run: |
          echo "‚è±Ô∏è Starting manual conflict resolution with 30-second timeout..."
          echo "üîß Starting automatic i18n conflict resolution with timeout protection..."

          # Make the script executable
          chmod +x scripts/auto-resolve-i18n-conflicts.sh

          # Attempt to merge the target branch
          echo "Attempting to merge ${{ github.event.inputs.target_branch }}..."
          git merge origin/${{ github.event.inputs.target_branch }} || true

          # Check if there are actual merge conflicts in .po files
          if git status --porcelain | grep -q "^UU.*\.po$"; then
            echo "Running auto-resolve script for i18n conflicts..."
            ./scripts/auto-resolve-i18n-conflicts.sh
            
            # Stage and commit the resolved files
            git add .
            git commit -m "[MANUAL] Auto-resolve i18n conflicts via GitHub Actions"
            
            # Push the changes back to the PR branch
            git push origin HEAD
            
            echo "‚úÖ i18n conflicts have been automatically resolved and committed."
          else
            echo "‚ÑπÔ∏è No merge conflicts found in .po files after merge attempt"
          fi

      # Step 9: Handle case when no conflicts are detected
      - name: No conflicts detected
        if: github.event.inputs.dry_run == 'false' && steps.conflict-check.outputs.conflicts_detected == 'false'
        run: |
          echo "‚ÑπÔ∏è No i18n conflicts detected between this PR and ${{ github.event.inputs.target_branch }}"
          echo "The PR appears to be ready for merge or conflicts are in non-translation files."

      # Step 10: Handle timeout fallback with automatic actions
      - name: Handle timeout fallback
        if: failure() && github.event.inputs.dry_run == 'false' && steps.conflict-check.outputs.conflicts_detected == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const prNumber = ${{ github.event.inputs.pr_number }};

            // Post timeout notification with fallback actions
            const commentBody = `‚ö†Ô∏è **Manual i18n Conflict Resolution Timeout**

            The manual conflict resolution process timed out after 30 seconds. This may indicate complex conflicts that require manual intervention.

            **Automatic fallback actions taken:**
            - üìã PR labeled for urgent manual review
            - üîÑ System will return to default state (ready for manual resolution)
            - üìß Development team has been notified

            **Next steps:**
            1. Please manually resolve the conflicts in translation files locally
            2. Try running the resolution again with simpler conflicts
            3. Consider breaking down large translation changes into smaller PRs
            4. Contact the development team if issues persist

            *This timeout occurred during manual resolution via GitHub Actions.*`;

            await github.rest.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });

            // Add timeout and urgent review labels
            try {
              await github.rest.issues.addLabels({
                issue_number: prNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: ['manual-timeout', 'urgent-review', 'needs-local-resolution']
              });
            } catch (error) {
              console.log('Could not add labels (labels may not exist):', error.message);
            }

            // Set PR to draft if possible (fallback to default state)
            try {
              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
                draft: true
              });
              console.log('‚úÖ Set PR to draft state as fallback action');
            } catch (error) {
              console.log('Could not set PR to draft:', error.message);
            }

      # Step 11: Comment on the PR with results
      - name: Comment on PR with results
        if: success() && github.event.inputs.dry_run == 'false'
        uses: actions/github-script@v6
        with:
          script: |
            const conflictsDetected = '${{ steps.conflict-check.outputs.conflicts_detected }}' === 'true';
            const prNumber = ${{ github.event.inputs.pr_number }};

            let commentBody;

            if (conflictsDetected) {
              commentBody = `ü§ñ **Manual i18n Conflict Resolution Completed**

            ‚úÖ I have successfully resolved merge conflicts in translation files (.po) using the automated resolution script within the 30-second timeout window.

            **What was done:**
            - Merged latest changes from \`${{ github.event.inputs.target_branch }}\` branch
            - Applied intelligent conflict resolution for Lingui translation files
            - Recompiled translation catalogs
            - Committed the resolved changes

            **Next steps:**
            - Please review the resolved translation files
            - Verify that the translations are correct and complete
            - The PR is now ready for final review and merge

            *This resolution was triggered manually via GitHub Actions with timeout protection.*`;
            } else {
              commentBody = `ü§ñ **Manual i18n Conflict Check Completed**

            ‚ÑπÔ∏è No translation file conflicts were detected between this PR and the \`${{ github.event.inputs.target_branch }}\` branch.

            The PR appears to be ready for merge, or any conflicts are in non-translation files that require manual resolution.

            *This check was triggered manually via GitHub Actions with timeout protection.*`;
            }

            await github.rest.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });

      # Step 12: Summary output
      - name: Workflow summary
        if: always()
        run: |
          echo "üìä WORKFLOW SUMMARY WITH TIMEOUT PROTECTION"
          echo "==========================================="
          echo "PR Number: ${{ github.event.inputs.pr_number }}"
          echo "PR Title: ${{ steps.pr-info.outputs.pr_title }}"
          echo "Target Branch: ${{ github.event.inputs.target_branch }}"
          echo "Dry Run Mode: ${{ github.event.inputs.dry_run }}"
          echo "Conflicts Detected: ${{ steps.conflict-check.outputs.conflicts_detected }}"
          echo "Has i18n Files: ${{ steps.pr-info.outputs.has_i18n_files }}"
          echo "Timeout Protection: 30 seconds (1 minute minimum)"
          echo "Workflow Status: ${{ job.status }}"
          echo ""
          if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            echo "üîç This was a dry run - no changes were made"
          elif [ "${{ job.status }}" = "failure" ]; then
            echo "‚ö†Ô∏è Workflow failed - likely due to timeout or complex conflicts"
          elif [ "${{ steps.conflict-check.outputs.conflicts_detected }}" = "true" ]; then
            echo "‚úÖ Conflicts were detected and resolved automatically within timeout"
          else
            echo "‚ÑπÔ∏è No conflicts detected - no action needed"
          fi
